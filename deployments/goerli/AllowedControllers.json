{
  "address": "0x59A9c26777304F2bfEbCD1D779266d49A765383B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lockControllers",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_delegationControllers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllowedControllers__setDelegationControllerAllowance_invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllowedControllers__setDelegationControllerAllowances_arityMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllowedControllers__setLockControllerAllowance_invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllowedControllers__setLockControllerAllowances_arityMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegationController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "DelegationController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockController",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "LockController",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "isAllowedDelegationController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "isAllowedLockController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setDelegationControllerAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_controllers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_allowances",
          "type": "bool[]"
        }
      ],
      "name": "setDelegationControllerAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setLockControllerAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_controllers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_allowances",
          "type": "bool[]"
        }
      ],
      "name": "setLockControllerAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b49b94f084ebcc5e8a639244434ed36a3e68e1bec589926e2a18b6fd44121d0",
  "receipt": {
    "to": null,
    "from": "0x9be99c3959AC66a5d7257a99C86653bD3f228b49",
    "contractAddress": "0x59A9c26777304F2bfEbCD1D779266d49A765383B",
    "transactionIndex": 83,
    "gasUsed": "497458",
    "logsBloom": "0x
    "blockHash": "0x4ccc025ffef40614c98f8a7a074e47e87b2d2d86f9df1344e74ff25e17b27acb",
    "transactionHash": "0x3b49b94f084ebcc5e8a639244434ed36a3e68e1bec589926e2a18b6fd44121d0",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 8374967,
        "transactionHash": "0x3b49b94f084ebcc5e8a639244434ed36a3e68e1bec589926e2a18b6fd44121d0",
        "address": "0x59A9c26777304F2bfEbCD1D779266d49A765383B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009be99c3959ac66a5d7257a99c86653bd3f228b49"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0x4ccc025ffef40614c98f8a7a074e47e87b2d2d86f9df1344e74ff25e17b27acb"
      }
    ],
    "blockNumber": 8374967,
    "cumulativeGasUsed": "20932507",
    "status": 1,
    "byzantium": true
  },
  "args": [[], []],
  "numDeployments": 1,
  "solcInputHash": "31c57df646d188b9526cd693d0ef43b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lockControllers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_delegationControllers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowedControllers__setDelegationControllerAllowance_invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowedControllers__setDelegationControllerAllowances_arityMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowedControllers__setLockControllerAllowance_invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowedControllers__setLockControllerAllowances_arityMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegationController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"DelegationController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"LockController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"isAllowedDelegationController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"isAllowedLockController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setDelegationControllerAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_controllers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_allowances\",\"type\":\"bool[]\"}],\"name\":\"setDelegationControllerAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setLockControllerAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_controllers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_allowances\",\"type\":\"bool[]\"}],\"name\":\"setLockControllerAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BootNode\",\"details\":\"Registry for allowed addresses to be used as lock or delegation controllers in a DelegationWallet.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_delegationControllers\":\"- The batch of delegation controller addresses initially allowed.\",\"_lockControllers\":\"- The batch of lock controller addresses initially allowed.\"}},\"isAllowedDelegationController(address)\":{\"params\":{\"_controller\":\"- The address of the controller.\"}},\"isAllowedLockController(address)\":{\"params\":{\"_controller\":\"- The address of the controller.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDelegationControllerAllowance(address,bool)\":{\"params\":{\"_allowed\":\"- The new status of whether the controller is allowed or not.\",\"_controller\":\"- The address of the controller whose allowance list status changed.\"}},\"setDelegationControllerAllowances(address[],bool[])\":{\"params\":{\"_allowances\":\"- The new statuses of whether the controller is allowed or not.\",\"_controllers\":\"- The addresses of the controllers whose allowance list status changed.\"}},\"setLockControllerAllowance(address,bool)\":{\"params\":{\"_allowed\":\"- The new status of whether the controller is allowed or not.\",\"_controller\":\"- The address of the controller whose allowance list status changed.\"}},\"setLockControllerAllowances(address[],bool[])\":{\"params\":{\"_allowances\":\"- The new statuses of whether the controller is allowed or not.\",\"_controllers\":\"- The addresses of the controllers whose allowance list status changed.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AllowedController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initialize `allowedLockControllers` and  `allowedDelegationControllers` with a batch of allowed controllers.\"},\"isAllowedDelegationController(address)\":{\"notice\":\"Checks if an address is an allowed delegation controller.\"},\"isAllowedLockController(address)\":{\"notice\":\"Checks if an address is an allowed lock controller.\"},\"setDelegationControllerAllowance(address,bool)\":{\"notice\":\"This function can be called by admins to change the allowance status of a lock controller. This includes both adding a controller to the allowed list and removing it.\"},\"setDelegationControllerAllowances(address[],bool[])\":{\"notice\":\"This function can be called by admins to change the permitted status of a batch of delegation controllers. This both adding a controller to the allowed list and removing it.\"},\"setLockControllerAllowance(address,bool)\":{\"notice\":\"This function can be called by admins to change the allowance status of a lock controller. This includes both adding a controller to the allowed list and removing it.\"},\"setLockControllerAllowances(address[],bool[])\":{\"notice\":\"This function can be called by admins to change the permitted status of a batch of lock controllers. This both adding a controller to the allowed list and removing it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/AllowedControllers.sol\":\"AllowedControllers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/AllowedControllers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AllowedController\\n * @author BootNode\\n * @dev Registry for allowed addresses to be used as lock or delegation controllers in a DelegationWallet.\\n */\\ncontract AllowedControllers is Ownable {\\n    /**\\n     * @notice A mapping from a controllers address to whether that address is allowed to be used by a DelegationWallet\\n     * as a lock controller.\\n     */\\n    mapping(address => bool) private allowedLockControllers;\\n\\n    /**\\n     * @notice A mapping from a controllers address to whether that address is allowed to be used by a DelegationWallet\\n     * as a delegation controller.\\n     */\\n    mapping(address => bool) private allowedDelegationControllers;\\n\\n    // ========== Events ===========\\n\\n    event LockController(address indexed lockController, bool isAllowed);\\n\\n    event DelegationController(address indexed delegationController, bool isAllowed);\\n\\n    // ========== Custom Errors ===========\\n\\n    error AllowedControllers__setLockControllerAllowances_arityMismatch();\\n    error AllowedControllers__setDelegationControllerAllowances_arityMismatch();\\n    error AllowedControllers__setLockControllerAllowance_invalidAddress();\\n    error AllowedControllers__setDelegationControllerAllowance_invalidAddress();\\n\\n    /**\\n     * @notice Initialize `allowedLockControllers` and  `allowedDelegationControllers` with a batch of allowed\\n     * controllers.\\n     *\\n     * @param _lockControllers - The batch of lock controller addresses initially allowed.\\n     * @param _delegationControllers - The batch of delegation controller addresses initially allowed.\\n     */\\n    constructor(address[] memory _lockControllers, address[] memory _delegationControllers) {\\n        for (uint256 i; i < _lockControllers.length; ) {\\n            _setLockControllerAllowance(_lockControllers[i], true);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        for (uint256 j; j < _delegationControllers.length; ) {\\n            _setDelegationControllerAllowance(_delegationControllers[j], true);\\n            unchecked {\\n                j++;\\n            }\\n        }\\n    }\\n\\n    // ========== External functions ===========\\n\\n    /**\\n     * @notice This function can be called by admins to change the allowance status of a lock controller. This includes\\n     * both adding a controller to the allowed list and removing it.\\n     *\\n     * @param _controller - The address of the controller whose allowance list status changed.\\n     * @param _allowed - The new status of whether the controller is allowed or not.\\n     */\\n    function setLockControllerAllowance(address _controller, bool _allowed) external onlyOwner {\\n        _setLockControllerAllowance(_controller, _allowed);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of a batch of lock controllers. This\\n     * both adding a controller to the allowed list and removing it.\\n     *\\n     * @param _controllers - The addresses of the controllers whose allowance list status changed.\\n     * @param _allowances - The new statuses of whether the controller is allowed or not.\\n     */\\n    function setLockControllerAllowances(address[] memory _controllers, bool[] memory _allowances) external onlyOwner {\\n        if (_controllers.length != _allowances.length)\\n            revert AllowedControllers__setLockControllerAllowances_arityMismatch();\\n\\n        for (uint256 i; i < _controllers.length; ) {\\n            _setLockControllerAllowance(_controllers[i], _allowances[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the allowance status of a lock controller. This includes\\n     * both adding a controller to the allowed list and removing it.\\n     *\\n     * @param _controller - The address of the controller whose allowance list status changed.\\n     * @param _allowed - The new status of whether the controller is allowed or not.\\n     */\\n    function setDelegationControllerAllowance(address _controller, bool _allowed) external onlyOwner {\\n        _setDelegationControllerAllowance(_controller, _allowed);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of a batch of delegation\\n     * controllers. This both adding a controller to the allowed list and removing it.\\n     *\\n     * @param _controllers - The addresses of the controllers whose allowance list status changed.\\n     * @param _allowances - The new statuses of whether the controller is allowed or not.\\n     */\\n    function setDelegationControllerAllowances(\\n        address[] memory _controllers,\\n        bool[] memory _allowances\\n    ) external onlyOwner {\\n        if (_controllers.length != _allowances.length)\\n            revert AllowedControllers__setDelegationControllerAllowances_arityMismatch();\\n\\n        for (uint256 i; i < _controllers.length; ) {\\n            _setDelegationControllerAllowance(_controllers[i], _allowances[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if an address is an allowed lock controller.\\n     *\\n     * @param _controller - The address of the controller.\\n     */\\n    function isAllowedLockController(address _controller) external view returns (bool) {\\n        return allowedLockControllers[_controller];\\n    }\\n\\n    /**\\n     * @notice Checks if an address is an allowed delegation controller.\\n     *\\n     * @param _controller - The address of the controller.\\n     */\\n    function isAllowedDelegationController(address _controller) external view returns (bool) {\\n        return allowedDelegationControllers[_controller];\\n    }\\n\\n    /**\\n     * @notice Changes the allowance status of an lock controller. This includes both adding a controller to the\\n     * allowed list and removing it.\\n     *\\n     * @param _lockController - The address of the controller whose allowance list status changed.\\n     * @param _allowed - The new status of whether the controller is allowed or not.\\n     */\\n    function _setLockControllerAllowance(address _lockController, bool _allowed) internal {\\n        if (_lockController == address(0)) revert AllowedControllers__setLockControllerAllowance_invalidAddress();\\n\\n        allowedLockControllers[_lockController] = _allowed;\\n\\n        emit LockController(_lockController, _allowed);\\n    }\\n\\n    /**\\n     * @notice Changes the allowance status of an delegation controller. This includes both adding a controller to the\\n     * allowed list and removing it.\\n     *\\n     * @param _delegationController - The address of the controller whose allowance list status changed.\\n     * @param _allowed - The new status of whether the controller is allowed or not.\\n     */\\n    function _setDelegationControllerAllowance(address _delegationController, bool _allowed) internal {\\n        if (_delegationController == address(0))\\n            revert AllowedControllers__setDelegationControllerAllowance_invalidAddress();\\n\\n        allowedDelegationControllers[_delegationController] = _allowed;\\n\\n        emit DelegationController(_delegationController, _allowed);\\n    }\\n}\\n\",\"keccak256\":\"0xe7d7117871bc9a182fd567da5905223eca778ac63e27e91f23aa05fdb1308f3a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000af238038062000af283398101604081905262000034916200030c565b6200003f33620000d3565b60005b825181101562000084576200007b83828151811062000065576200006562000376565b602002602001015160016200012360201b60201c565b60010162000042565b5060005b8151811015620000ca57620000c1828281518110620000ab57620000ab62000376565b60200260200101516001620001ab60201b60201c565b60010162000088565b5050506200038c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166200014b576040516327e9bcc360e11b815260040160405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4a426b3586763d6aabeea5d8f92ce686fc34d19279731f83bcd9ff89bef021c291015b60405180910390a25050565b6001600160a01b038216620001d3576040516341126e1d60e11b815260040160405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f77083d89cc5ca63496d90d6404c7d60f549bdbd78dfd2dc71003898488187cd291016200019f565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200025a57600080fd5b919050565b600082601f8301126200027157600080fd5b815160206001600160401b03808311156200029057620002906200022c565b8260051b604051601f19603f83011681018181108482111715620002b857620002b86200022c565b604052938452858101830193838101925087851115620002d757600080fd5b83870191505b848210156200030157620002f18262000242565b83529183019190830190620002dd565b979650505050505050565b600080604083850312156200032057600080fd5b82516001600160401b03808211156200033857600080fd5b62000346868387016200025f565b935060208501519150808211156200035d57600080fd5b506200036c858286016200025f565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b610756806200039c6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100db57806395f85513146100fb5780639bffae8314610137578063c319f8ce1461014a578063f2fde38b1461017657600080fd5b80630ee8a0cf146100985780633b9e0f4b146100ad57806343b40d66146100c0578063715018a6146100d3575b600080fd5b6100ab6100a6366004610518565b610189565b005b6100ab6100bb366004610628565b61019f565b6100ab6100ce366004610518565b61021e565b6100ab610230565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6101276101093660046106e8565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016100f2565b6100ab610145366004610628565b610244565b6101276101583660046106e8565b6001600160a01b031660009081526002602052604090205460ff1690565b6100ab6101843660046106e8565b6102be565b61019161033c565b61019b8282610396565b5050565b6101a761033c565b80518251146101c957604051631cf7644160e21b815260040160405180910390fd5b60005b8251811015610219576102118382815181106101ea576101ea61070a565b60200260200101518383815181106102045761020461070a565b602002602001015161041d565b6001016101cc565b505050565b61022661033c565b61019b828261041d565b61023861033c565b610242600061049c565b565b61024c61033c565b805182511461026e5760405163df5f87db60e01b815260040160405180910390fd5b60005b8251811015610219576102b683828151811061028f5761028f61070a565b60200260200101518383815181106102a9576102a961070a565b6020026020010151610396565b600101610271565b6102c661033c565b6001600160a01b0381166103305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103398161049c565b50565b6000546001600160a01b031633146102425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610327565b6001600160a01b0382166103bd576040516327e9bcc360e11b815260040160405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4a426b3586763d6aabeea5d8f92ce686fc34d19279731f83bcd9ff89bef021c291015b60405180910390a25050565b6001600160a01b038216610444576040516341126e1d60e11b815260040160405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f77083d89cc5ca63496d90d6404c7d60f549bdbd78dfd2dc71003898488187cd29101610411565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461050357600080fd5b919050565b8035801515811461050357600080fd5b6000806040838503121561052b57600080fd5b610534836104ec565b915061054260208401610508565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561058a5761058a61054b565b604052919050565b600067ffffffffffffffff8211156105ac576105ac61054b565b5060051b60200190565b600082601f8301126105c757600080fd5b813560206105dc6105d783610592565b610561565b82815260059290921b840181019181810190868411156105fb57600080fd5b8286015b8481101561061d5761061081610508565b83529183019183016105ff565b509695505050505050565b6000806040838503121561063b57600080fd5b823567ffffffffffffffff8082111561065357600080fd5b818501915085601f83011261066757600080fd5b813560206106776105d783610592565b82815260059290921b8401810191818101908984111561069657600080fd5b948201945b838610156106bb576106ac866104ec565b8252948201949082019061069b565b965050860135925050808211156106d157600080fd5b506106de858286016105b6565b9150509250929050565b6000602082840312156106fa57600080fd5b610703826104ec565b9392505050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212207fcd99a9fb8e92e81ec116a98088711e699218e8eab55df65d59625c8b54bdb764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100db57806395f85513146100fb5780639bffae8314610137578063c319f8ce1461014a578063f2fde38b1461017657600080fd5b80630ee8a0cf146100985780633b9e0f4b146100ad57806343b40d66146100c0578063715018a6146100d3575b600080fd5b6100ab6100a6366004610518565b610189565b005b6100ab6100bb366004610628565b61019f565b6100ab6100ce366004610518565b61021e565b6100ab610230565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6101276101093660046106e8565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016100f2565b6100ab610145366004610628565b610244565b6101276101583660046106e8565b6001600160a01b031660009081526002602052604090205460ff1690565b6100ab6101843660046106e8565b6102be565b61019161033c565b61019b8282610396565b5050565b6101a761033c565b80518251146101c957604051631cf7644160e21b815260040160405180910390fd5b60005b8251811015610219576102118382815181106101ea576101ea61070a565b60200260200101518383815181106102045761020461070a565b602002602001015161041d565b6001016101cc565b505050565b61022661033c565b61019b828261041d565b61023861033c565b610242600061049c565b565b61024c61033c565b805182511461026e5760405163df5f87db60e01b815260040160405180910390fd5b60005b8251811015610219576102b683828151811061028f5761028f61070a565b60200260200101518383815181106102a9576102a961070a565b6020026020010151610396565b600101610271565b6102c661033c565b6001600160a01b0381166103305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103398161049c565b50565b6000546001600160a01b031633146102425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610327565b6001600160a01b0382166103bd576040516327e9bcc360e11b815260040160405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4a426b3586763d6aabeea5d8f92ce686fc34d19279731f83bcd9ff89bef021c291015b60405180910390a25050565b6001600160a01b038216610444576040516341126e1d60e11b815260040160405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f77083d89cc5ca63496d90d6404c7d60f549bdbd78dfd2dc71003898488187cd29101610411565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461050357600080fd5b919050565b8035801515811461050357600080fd5b6000806040838503121561052b57600080fd5b610534836104ec565b915061054260208401610508565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561058a5761058a61054b565b604052919050565b600067ffffffffffffffff8211156105ac576105ac61054b565b5060051b60200190565b600082601f8301126105c757600080fd5b813560206105dc6105d783610592565b610561565b82815260059290921b840181019181810190868411156105fb57600080fd5b8286015b8481101561061d5761061081610508565b83529183019183016105ff565b509695505050505050565b6000806040838503121561063b57600080fd5b823567ffffffffffffffff8082111561065357600080fd5b818501915085601f83011261066757600080fd5b813560206106776105d783610592565b82815260059290921b8401810191818101908984111561069657600080fd5b948201945b838610156106bb576106ac866104ec565b8252948201949082019061069b565b965050860135925050808211156106d157600080fd5b506106de858286016105b6565b9150509250929050565b6000602082840312156106fa57600080fd5b610703826104ec565b9392505050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212207fcd99a9fb8e92e81ec116a98088711e699218e8eab55df65d59625c8b54bdb764736f6c63430008110033",
  "devdoc": {
    "author": "BootNode",
    "details": "Registry for allowed addresses to be used as lock or delegation controllers in a DelegationWallet.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_delegationControllers": "- The batch of delegation controller addresses initially allowed.",
          "_lockControllers": "- The batch of lock controller addresses initially allowed."
        }
      },
      "isAllowedDelegationController(address)": {
        "params": {
          "_controller": "- The address of the controller."
        }
      },
      "isAllowedLockController(address)": {
        "params": {
          "_controller": "- The address of the controller."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDelegationControllerAllowance(address,bool)": {
        "params": {
          "_allowed": "- The new status of whether the controller is allowed or not.",
          "_controller": "- The address of the controller whose allowance list status changed."
        }
      },
      "setDelegationControllerAllowances(address[],bool[])": {
        "params": {
          "_allowances": "- The new statuses of whether the controller is allowed or not.",
          "_controllers": "- The addresses of the controllers whose allowance list status changed."
        }
      },
      "setLockControllerAllowance(address,bool)": {
        "params": {
          "_allowed": "- The new status of whether the controller is allowed or not.",
          "_controller": "- The address of the controller whose allowance list status changed."
        }
      },
      "setLockControllerAllowances(address[],bool[])": {
        "params": {
          "_allowances": "- The new statuses of whether the controller is allowed or not.",
          "_controllers": "- The addresses of the controllers whose allowance list status changed."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AllowedController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initialize `allowedLockControllers` and  `allowedDelegationControllers` with a batch of allowed controllers."
      },
      "isAllowedDelegationController(address)": {
        "notice": "Checks if an address is an allowed delegation controller."
      },
      "isAllowedLockController(address)": {
        "notice": "Checks if an address is an allowed lock controller."
      },
      "setDelegationControllerAllowance(address,bool)": {
        "notice": "This function can be called by admins to change the allowance status of a lock controller. This includes both adding a controller to the allowed list and removing it."
      },
      "setDelegationControllerAllowances(address[],bool[])": {
        "notice": "This function can be called by admins to change the permitted status of a batch of delegation controllers. This both adding a controller to the allowed list and removing it."
      },
      "setLockControllerAllowance(address,bool)": {
        "notice": "This function can be called by admins to change the allowance status of a lock controller. This includes both adding a controller to the allowed list and removing it."
      },
      "setLockControllerAllowances(address[],bool[])": {
        "notice": "This function can be called by admins to change the permitted status of a batch of lock controllers. This both adding a controller to the allowed list and removing it."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2596,
        "contract": "src/AllowedControllers.sol:AllowedControllers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7180,
        "contract": "src/AllowedControllers.sol:AllowedControllers",
        "label": "allowedLockControllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7185,
        "contract": "src/AllowedControllers.sol:AllowedControllers",
        "label": "allowedDelegationControllers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
