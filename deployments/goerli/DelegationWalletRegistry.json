{
  "address": "0xCFb4Ee8AC78e91105e54f18830a50C93C8B2004C",
  "abi": [
    {
      "inputs": [],
      "name": "DelegationWalletRegistry__onlyFactoryOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegationWalletRegistry__setFactory_invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegationWalletRegistry__setWallet_invalidDelegationOwnerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegationWalletRegistry__setWallet_invalidGuardAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegationWalletRegistry__setWallet_invalidOwnerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegationWalletRegistry__setWallet_invalidWalletAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "delegationWalletFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerWalletAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOwnerWalletAt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationGuard",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationWalletRegistry.Wallet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "getWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegationGuard",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationWalletRegistry.Wallet",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegationWalletFactory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegationOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegationGuard",
          "type": "address"
        }
      ],
      "name": "setWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8a52860984d28dcac55e3145c75b7166281b60f7d1cbfd336a880a713ee5433",
  "receipt": {
    "to": null,
    "from": "0x9be99c3959AC66a5d7257a99C86653bD3f228b49",
    "contractAddress": "0xCFb4Ee8AC78e91105e54f18830a50C93C8B2004C",
    "transactionIndex": 76,
    "gasUsed": "541014",
    "logsBloom": "0x
    "blockHash": "0xaa2bfa5044238a8425a4e9630cd0d3c8955e402242359943ec5d6dd2158734cb",
    "transactionHash": "0xb8a52860984d28dcac55e3145c75b7166281b60f7d1cbfd336a880a713ee5433",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 8135045,
        "transactionHash": "0xb8a52860984d28dcac55e3145c75b7166281b60f7d1cbfd336a880a713ee5433",
        "address": "0xCFb4Ee8AC78e91105e54f18830a50C93C8B2004C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009be99c3959ac66a5d7257a99c86653bd3f228b49"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0xaa2bfa5044238a8425a4e9630cd0d3c8955e402242359943ec5d6dd2158734cb"
      }
    ],
    "blockNumber": 8135045,
    "cumulativeGasUsed": "27186918",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a56c6ee922d4ac6e80286fa9713dcc7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DelegationWalletRegistry__onlyFactoryOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegationWalletRegistry__setFactory_invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegationWalletRegistry__setWallet_invalidDelegationOwnerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegationWalletRegistry__setWallet_invalidGuardAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegationWalletRegistry__setWallet_invalidOwnerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegationWalletRegistry__setWallet_invalidWalletAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"delegationWalletFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerWalletAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOwnerWalletAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationGuard\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationWalletRegistry.Wallet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegationGuard\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationWalletRegistry.Wallet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegationWalletFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationGuard\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getOwnerWalletAddresses(address)\":{\"details\":\"Return the entire set in an array WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegationWalletFactory()\":{\"notice\":\"Address of the DelegationWalletFactory contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DelegationWalletRegistry.sol\":\"DelegationWalletRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"src/DelegationWalletRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport { IDelegationWalletRegistry } from \\\"./interfaces/IDelegationWalletRegistry.sol\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract DelegationWalletRegistry is IDelegationWalletRegistry, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(address => Wallet) internal wallets;\\n\\n    mapping(address => EnumerableSet.AddressSet) internal walletsByOwner;\\n\\n    /**\\n     * @notice Address of the DelegationWalletFactory contract.\\n     */\\n    address public delegationWalletFactory;\\n\\n    // ========== Events ===========\\n\\n    // ========== Custom Errors ===========\\n    error DelegationWalletRegistry__onlyFactoryOrOwner();\\n\\n    error DelegationWalletRegistry__setFactory_invalidAddress();\\n\\n    error DelegationWalletRegistry__setWallet_invalidWalletAddress();\\n    error DelegationWalletRegistry__setWallet_invalidOwnerAddress();\\n    error DelegationWalletRegistry__setWallet_invalidDelegationOwnerAddress();\\n    error DelegationWalletRegistry__setWallet_invalidGuardAddress();\\n\\n    // ========== Modifiers ===========\\n    /**\\n     * @notice This modifier indicates that only the DelegationWalletFactory can execute a given function.\\n     */\\n    modifier onlyFactoryOrOwner() {\\n        if (_msgSender() != delegationWalletFactory && owner() != _msgSender()) revert DelegationWalletRegistry__onlyFactoryOrOwner();\\n        _;\\n    }\\n\\n    function setFactory(address _delegationWalletFactory) external onlyOwner {\\n        if (_delegationWalletFactory == address(0)) revert DelegationWalletRegistry__setFactory_invalidAddress();\\n        delegationWalletFactory = _delegationWalletFactory;\\n    }\\n\\n    function setWallet(address _wallet, address _owner, address _delegationOwner, address _delegationGuard) external onlyFactoryOrOwner {\\n        if (_wallet == address(0)) revert DelegationWalletRegistry__setWallet_invalidWalletAddress();\\n        if (_owner == address(0)) revert DelegationWalletRegistry__setWallet_invalidOwnerAddress();\\n        if (_delegationOwner == address(0)) revert DelegationWalletRegistry__setWallet_invalidDelegationOwnerAddress();\\n        if (_delegationGuard == address(0)) revert DelegationWalletRegistry__setWallet_invalidGuardAddress();\\n\\n        wallets[_wallet] = Wallet(_wallet, _owner, _delegationOwner, _delegationGuard);\\n\\n        walletsByOwner[_owner].add(_wallet);\\n    }\\n\\n    function getWallet(address _wallet) external view returns(Wallet memory) {\\n      return wallets[_wallet];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function getOwnerWalletAddresses(address _owner) external view returns(address[] memory) {\\n      return walletsByOwner[_owner].values();\\n    }\\n\\n    function getOwnerWalletAt(address _owner, uint256 _index) external view returns(Wallet memory) {\\n      return wallets[walletsByOwner[_owner].at(_index)];\\n    }\\n}\\n\",\"keccak256\":\"0xb8512b76ffabf19ba449ecaa962747d23b9162c16a96e084d9523f71537efd43\",\"license\":\"UNLICENSED\"},\"src/interfaces/IDelegationWalletRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IDelegationWalletRegistry {\\n    struct Wallet {\\n        address wallet;\\n        address owner;\\n        address delegationOwner;\\n        address delegationGuard;\\n    }\\n\\n    function setFactory(address _delegationWalletFactory) external;\\n    function setWallet(address _wallet, address _owner, address _delegationOwner, address _delegationGuard) external;\\n    function getWallet(address _wallet) external view returns(Wallet memory);\\n    function getOwnerWalletAddresses(address _owner) external view returns(address[] memory);\\n    function getOwnerWalletAt(address _owner, uint256 _index) external view returns(Wallet memory);\\n}\\n\",\"keccak256\":\"0x09abc7b2d02235f5fce66bf1e5a60c0c89deb81f868eda27b4da412de7feb3eb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61085d8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101a3578063d2fe0ba6146101c8578063f2fde38b146101db578063fbd72d0e146101ee578063fe6a42f11461020157600080fd5b806304d0a6471461009857806355635253146101665780635bb4780814610186578063715018a61461019b575b600080fd5b61011a6100a636600461072b565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b039586168252600180825291859020855193840186528054871684529182015486169083015260028101548516938201939093526003909201549092169181019190915290565b60405161015d919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b60405180910390f35b61017961017436600461072b565b610214565b60405161015d9190610746565b61019961019436600461072b565b61023e565b005b61019961028f565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161015d565b6003546101b0906001600160a01b031681565b6101996101e936600461072b565b6102a3565b61011a6101fc366004610793565b610321565b61019961020f3660046107bd565b6103c2565b6001600160a01b03811660009081526002602052604090206060906102389061055b565b92915050565b61024661056f565b6001600160a01b03811661026d576040516339c833f360e21b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61029761056f565b6102a160006105c9565b565b6102ab61056f565b6001600160a01b0381166103155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61031e816105c9565b50565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03861682526002905291822090916001916103679085610619565b6001600160a01b03908116825260208083019390935260409182016000208251608081018452815483168152600182015483169481019490945260028101548216928401929092526003909101541660608201529392505050565b6003546001600160a01b0316336001600160a01b0316141580156103f157506000546001600160a01b03163314155b1561040f5760405163d76e161b60e01b815260040160405180910390fd5b6001600160a01b03841661043657604051636e09d31560e11b815260040160405180910390fd5b6001600160a01b03831661045d5760405163665196b160e01b815260040160405180910390fd5b6001600160a01b0382166104845760405163f681232f60e01b815260040160405180910390fd5b6001600160a01b0381166104ab5760405163594211a560e11b815260040160405180910390fd5b604080516080810182526001600160a01b0386811680835286821660208085018281528885168688019081528886166060880190815260009586526001808552898720985189546001600160a01b0319908116918a16919091178a55935190890180548516918916919091179055905160028089018054851692891692909217909155905160039097018054909216969095169590951790945581529152206105549085610625565b5050505050565b606060006105688361063a565b9392505050565b6000546001600160a01b031633146102a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161030c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006105688383610696565b6000610568836001600160a01b0384166106c0565b60608160000180548060200260200160405190810160405280929190818152602001828054801561068a57602002820191906000526020600020905b815481526020019060010190808311610676575b50505050509050919050565b60008260000182815481106106ad576106ad610811565b9060005260206000200154905092915050565b600081815260018301602052604081205461070757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610238565b506000610238565b80356001600160a01b038116811461072657600080fd5b919050565b60006020828403121561073d57600080fd5b6105688261070f565b6020808252825182820181905260009190848201906040850190845b818110156107875783516001600160a01b031683529284019291840191600101610762565b50909695505050505050565b600080604083850312156107a657600080fd5b6107af8361070f565b946020939093013593505050565b600080600080608085870312156107d357600080fd5b6107dc8561070f565b93506107ea6020860161070f565b92506107f86040860161070f565b91506108066060860161070f565b905092959194509250565b634e487b7160e01b600052603260045260246000fdfea264697066735822122045fd60902c51dba163c92210c9b4e73be95958ccd18eca9e1b3909811dc64eeb64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101a3578063d2fe0ba6146101c8578063f2fde38b146101db578063fbd72d0e146101ee578063fe6a42f11461020157600080fd5b806304d0a6471461009857806355635253146101665780635bb4780814610186578063715018a61461019b575b600080fd5b61011a6100a636600461072b565b60408051608080820183526000808352602080840182905283850182905260609384018290526001600160a01b039586168252600180825291859020855193840186528054871684529182015486169083015260028101548516938201939093526003909201549092169181019190915290565b60405161015d919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b60405180910390f35b61017961017436600461072b565b610214565b60405161015d9190610746565b61019961019436600461072b565b61023e565b005b61019961028f565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161015d565b6003546101b0906001600160a01b031681565b6101996101e936600461072b565b6102a3565b61011a6101fc366004610793565b610321565b61019961020f3660046107bd565b6103c2565b6001600160a01b03811660009081526002602052604090206060906102389061055b565b92915050565b61024661056f565b6001600160a01b03811661026d576040516339c833f360e21b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61029761056f565b6102a160006105c9565b565b6102ab61056f565b6001600160a01b0381166103155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61031e816105c9565b50565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03861682526002905291822090916001916103679085610619565b6001600160a01b03908116825260208083019390935260409182016000208251608081018452815483168152600182015483169481019490945260028101548216928401929092526003909101541660608201529392505050565b6003546001600160a01b0316336001600160a01b0316141580156103f157506000546001600160a01b03163314155b1561040f5760405163d76e161b60e01b815260040160405180910390fd5b6001600160a01b03841661043657604051636e09d31560e11b815260040160405180910390fd5b6001600160a01b03831661045d5760405163665196b160e01b815260040160405180910390fd5b6001600160a01b0382166104845760405163f681232f60e01b815260040160405180910390fd5b6001600160a01b0381166104ab5760405163594211a560e11b815260040160405180910390fd5b604080516080810182526001600160a01b0386811680835286821660208085018281528885168688019081528886166060880190815260009586526001808552898720985189546001600160a01b0319908116918a16919091178a55935190890180548516918916919091179055905160028089018054851692891692909217909155905160039097018054909216969095169590951790945581529152206105549085610625565b5050505050565b606060006105688361063a565b9392505050565b6000546001600160a01b031633146102a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161030c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006105688383610696565b6000610568836001600160a01b0384166106c0565b60608160000180548060200260200160405190810160405280929190818152602001828054801561068a57602002820191906000526020600020905b815481526020019060010190808311610676575b50505050509050919050565b60008260000182815481106106ad576106ad610811565b9060005260206000200154905092915050565b600081815260018301602052604081205461070757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610238565b506000610238565b80356001600160a01b038116811461072657600080fd5b919050565b60006020828403121561073d57600080fd5b6105688261070f565b6020808252825182820181905260009190848201906040850190845b818110156107875783516001600160a01b031683529284019291840191600101610762565b50909695505050505050565b600080604083850312156107a657600080fd5b6107af8361070f565b946020939093013593505050565b600080600080608085870312156107d357600080fd5b6107dc8561070f565b93506107ea6020860161070f565b92506107f86040860161070f565b91506108066060860161070f565b905092959194509250565b634e487b7160e01b600052603260045260246000fdfea264697066735822122045fd60902c51dba163c92210c9b4e73be95958ccd18eca9e1b3909811dc64eeb64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getOwnerWalletAddresses(address)": {
        "details": "Return the entire set in an array WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "delegationWalletFactory()": {
        "notice": "Address of the DelegationWalletFactory contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2596,
        "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10038,
        "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
        "label": "wallets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Wallet)10386_storage)"
      },
      {
        "astId": 10043,
        "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
        "label": "walletsByOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AddressSet)6881_storage)"
      },
      {
        "astId": 10046,
        "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
        "label": "delegationWalletFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)6881_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6881_storage"
      },
      "t_mapping(t_address,t_struct(Wallet)10386_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IDelegationWalletRegistry.Wallet)",
        "numberOfBytes": "32",
        "value": "t_struct(Wallet)10386_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)6881_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6880,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6566_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6566_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6561,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6565,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Wallet)10386_storage": {
        "encoding": "inplace",
        "label": "struct IDelegationWalletRegistry.Wallet",
        "members": [
          {
            "astId": 10379,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 10381,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10383,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "delegationOwner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 10385,
            "contract": "src/DelegationWalletRegistry.sol:DelegationWalletRegistry",
            "label": "delegationGuard",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}