{
  "address": "0x69c99761a987Db3a72184B2F72FDcf9Dd2914D52",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "description",
          "type": "string[]"
        }
      ],
      "name": "AddRecipe",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "name": "RemoveRecipe",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "string[]",
          "name": "_descriptions",
          "type": "string[]"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "functionDescriptions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        }
      ],
      "name": "isAllowedFunction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collection",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "_selectors",
          "type": "bytes4[]"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd800b878209d7a2516f4baee781df02cae9481928ad02b20f97e68271331bbbc",
  "receipt": {
    "to": null,
    "from": "0x9be99c3959AC66a5d7257a99C86653bD3f228b49",
    "contractAddress": "0x69c99761a987Db3a72184B2F72FDcf9Dd2914D52",
    "transactionIndex": 93,
    "gasUsed": "826269",
    "logsBloom": "0x
    "blockHash": "0xd6327031f88650fe9bde8cfeb3c908a07a56ec62719e54a963820a01e780c89c",
    "transactionHash": "0xd800b878209d7a2516f4baee781df02cae9481928ad02b20f97e68271331bbbc",
    "logs": [
      {
        "transactionIndex": 93,
        "blockNumber": 8135043,
        "transactionHash": "0xd800b878209d7a2516f4baee781df02cae9481928ad02b20f97e68271331bbbc",
        "address": "0x69c99761a987Db3a72184B2F72FDcf9Dd2914D52",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009be99c3959ac66a5d7257a99c86653bd3f228b49"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0xd6327031f88650fe9bde8cfeb3c908a07a56ec62719e54a963820a01e780c89c"
      }
    ],
    "blockNumber": 8135043,
    "cumulativeGasUsed": "20971430",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a56c6ee922d4ac6e80286fa9713dcc7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"description\",\"type\":\"string[]\"}],\"name\":\"AddRecipe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"name\":\"RemoveRecipe\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"string[]\",\"name\":\"_descriptions\",\"type\":\"string[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"functionDescriptions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"isAllowedFunction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BootNode\",\"details\":\"Registers the functions that will be allowed to be executed by assets delegates. Functions are grouped by target contract and asset collection.\",\"kind\":\"dev\",\"methods\":{\"add(address,address[],bytes4[],string[])\":{\"params\":{\"_collection\":\"- The asset collection address.\",\"_contracts\":\"- The target contract addresses.\",\"_selectors\":\"- The allowed function selectors.\"}},\"isAllowedFunction(address,address,bytes4)\":{\"params\":{\"_collection\":\"- The owner's address.\",\"_contract\":\"- The owner's address.\",\"_selector\":\"- The owner's address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(address,address[],bytes4[])\":{\"params\":{\"_collection\":\"- The owner's address.\",\"_contracts\":\"- The owner's address.\",\"_selectors\":\"- The owner's address.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"DelegationRecipes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(address,address[],bytes4[],string[])\":{\"notice\":\"Adds a group of allowed functions to a asset collection.\"},\"isAllowedFunction(address,address,bytes4)\":{\"notice\":\"Checks if a function is allowed for a collection.\"},\"remove(address,address[],bytes4[])\":{\"notice\":\"Removes a group of allowed functions to a collection.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DelegationRecipes.sol\":\"DelegationRecipes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"src/DelegationRecipes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n\\n/**\\n * @title DelegationRecipes\\n * @author BootNode\\n * @dev Registers the functions that will be allowed to be executed by assets delegates.\\n * Functions are grouped by target contract and asset collection.\\n */\\ncontract DelegationRecipes is Ownable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // collection address -> keccak256(collection, contract, selector)\\n    mapping(address => EnumerableSet.Bytes32Set) internal functionByCollection;\\n\\n    // keccak256(collection, contract, selector) -> description\\n    mapping(bytes32 => string) public functionDescriptions;\\n\\n    // ========== Events ===========\\n    event AddRecipe(\\n        address indexed collection,\\n        address[] contracts,\\n        bytes4[] selectors,\\n        string[] description\\n    );\\n\\n    event RemoveRecipe(\\n        address indexed collection,\\n        address[] contracts,\\n        bytes4[] selectors\\n    );\\n\\n    /**\\n     * @notice Adds a group of allowed functions to a asset collection.\\n     * @param _collection - The asset collection address.\\n     * @param _contracts - The target contract addresses.\\n     * @param _selectors - The allowed function selectors.\\n     */\\n    function add(\\n        address _collection,\\n        address[] calldata _contracts,\\n        bytes4[] calldata _selectors,\\n        string[] calldata _descriptions\\n    ) external onlyOwner {\\n        // TODO - validate arity\\n\\n        bytes32 functionId;\\n        for (uint256 i; i < _contracts.length; ) {\\n            functionId = keccak256(abi.encodePacked(_collection, _contracts[i], _selectors[i]));\\n            functionByCollection[_collection].add(functionId);\\n            functionDescriptions[functionId] = _descriptions[i];\\n\\n            emit AddRecipe(_collection, _contracts, _selectors, _descriptions);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes a group of allowed functions to a collection.\\n     * @param _collection - The owner's address.\\n     * @param _contracts - The owner's address.\\n     * @param _selectors - The owner's address.\\n     */\\n    function remove(\\n        address _collection,\\n        address[] calldata _contracts,\\n        bytes4[] calldata _selectors\\n    ) external onlyOwner {\\n        // TODO - validate arity\\n\\n        bytes32 functionId;\\n        for (uint256 i; i < _contracts.length; ) {\\n            functionId = keccak256(abi.encodePacked(_collection, _contracts[i], _selectors[i]));\\n            functionByCollection[_collection].remove(functionId);\\n            delete functionDescriptions[functionId];\\n\\n            emit RemoveRecipe(_collection, _contracts, _selectors);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a function is allowed for a collection.\\n     * @param _collection - The owner's address.\\n     * @param _contract - The owner's address.\\n     * @param _selector - The owner's address.\\n     */\\n    function isAllowedFunction(\\n        address _collection,\\n        address _contract,\\n        bytes4 _selector\\n    ) external view returns (bool) {\\n        bytes32 functionId = keccak256(abi.encodePacked(_collection, _contract, _selector));\\n        return functionByCollection[_collection].contains(functionId);\\n    }\\n}\\n\",\"keccak256\":\"0xe1f38c290b555f2a9d9042b27d22d8321a26cb6ac10e28292eb15832ee890d06\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610d898061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806386458a9a1161005b57806386458a9a146100d85780638da5cb5b146100eb578063904cea8914610106578063f2fde38b1461011957600080fd5b80630c73853b14610082578063715018a6146100ab5780637421237c146100b5575b600080fd5b610095610090366004610811565b61012c565b6040516100a2919061082a565b60405180910390f35b6100b36101c6565b005b6100c86100c33660046108b3565b6101da565b60405190151581526020016100a2565b6100b36100e6366004610942565b610236565b6000546040516001600160a01b0390911681526020016100a2565b6100b36101143660046109ed565b610383565b6100b3610127366004610a6e565b6104a3565b6002602052600090815260409020805461014590610a89565b80601f016020809104026020016040519081016040528092919081815260200182805461017190610a89565b80156101be5780601f10610193576101008083540402835291602001916101be565b820191906000526020600020905b8154815290600101906020018083116101a157829003601f168201915b505050505081565b6101ce610521565b6101d8600061057b565b565b6000808484846040516020016101f293929190610ac3565b60408051601f1981840301815291815281516020928301206001600160a01b03881660009081526001909352912090915061022d90826105cb565b95945050505050565b61023e610521565b6000805b86811015610378578888888381811061025d5761025d610afb565b90506020020160208101906102729190610a6e565b87878481811061028457610284610afb565b90506020020160208101906102999190610b11565b6040516020016102ab93929190610ac3565b60408051601f1981840301815291815281516020928301206001600160a01b038c166000908152600190935291209092506102e690836105e8565b508383828181106102f9576102f9610afb565b905060200281019061030b9190610b2c565b6000848152600260205260409020610324929091610742565b50886001600160a01b03167fa37cd0d03093e07c4ef9cd1f187c6914dc250f2801c02c8eabd6ac8395ce24c089898989898960405161036896959493929190610c20565b60405180910390a2600101610242565b505050505050505050565b61038b610521565b6000805b8481101561049a57868686838181106103aa576103aa610afb565b90506020020160208101906103bf9190610a6e565b8585848181106103d1576103d1610afb565b90506020020160208101906103e69190610b11565b6040516020016103f893929190610ac3565b60408051601f1981840301815291815281516020928301206001600160a01b038a1660009081526001909352912090925061043390836105f4565b50600082815260026020526040812061044b916107c6565b866001600160a01b03167fde0904bd74762636b0230e0d8a5fe443456c9439692fd9f70523616fc20d80b38787878760405161048a9493929190610ce6565b60405180910390a260010161038f565b50505050505050565b6104ab610521565b6001600160a01b0381166105155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61051e8161057b565b50565b6000546001600160a01b031633146101d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205415155b90505b92915050565b60006105df8383610600565b60006105df838361064f565b6000818152600183016020526040812054610647575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e2565b5060006105e2565b60008181526001830160205260408120548015610738576000610673600183610d18565b855490915060009061068790600190610d18565b90508181146106ec5760008660000182815481106106a7576106a7610afb565b90600052602060002001549050808760000184815481106106ca576106ca610afb565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806106fd576106fd610d3d565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105e2565b60009150506105e2565b82805461074e90610a89565b90600052602060002090601f01602090048101928261077057600085556107b6565b82601f106107895782800160ff198235161785556107b6565b828001600101855582156107b6579182015b828111156107b657823582559160200191906001019061079b565b506107c29291506107fc565b5090565b5080546107d290610a89565b6000825580601f106107e2575050565b601f01602090049060005260206000209081019061051e91905b5b808211156107c257600081556001016107fd565b60006020828403121561082357600080fd5b5035919050565b600060208083528351808285015260005b818110156108575785810183015185820160400152820161083b565b81811115610869576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461089657600080fd5b919050565b80356001600160e01b03198116811461089657600080fd5b6000806000606084860312156108c857600080fd5b6108d18461087f565b92506108df6020850161087f565b91506108ed6040850161089b565b90509250925092565b60008083601f84011261090857600080fd5b50813567ffffffffffffffff81111561092057600080fd5b6020830191508360208260051b850101111561093b57600080fd5b9250929050565b60008060008060008060006080888a03121561095d57600080fd5b6109668861087f565b9650602088013567ffffffffffffffff8082111561098357600080fd5b61098f8b838c016108f6565b909850965060408a01359150808211156109a857600080fd5b6109b48b838c016108f6565b909650945060608a01359150808211156109cd57600080fd5b506109da8a828b016108f6565b989b979a50959850939692959293505050565b600080600080600060608688031215610a0557600080fd5b610a0e8661087f565b9450602086013567ffffffffffffffff80821115610a2b57600080fd5b610a3789838a016108f6565b90965094506040880135915080821115610a5057600080fd5b50610a5d888289016108f6565b969995985093965092949392505050565b600060208284031215610a8057600080fd5b6105df8261087f565b600181811c90821680610a9d57607f821691505b602082108103610abd57634e487b7160e01b600052602260045260246000fd5b50919050565b6bffffffffffffffffffffffff19606094851b811682529290931b90911660148301526001600160e01b0319166028820152602c0190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b2357600080fd5b6105df8261089b565b6000808335601e19843603018112610b4357600080fd5b83018035915067ffffffffffffffff821115610b5e57600080fd5b60200191503681900382131561093b57600080fd5b8183526000602080850194508260005b85811015610baf576001600160a01b03610b9c8361087f565b1687529582019590820190600101610b83565b509495945050505050565b8183526000602080850194508260005b85811015610baf576001600160e01b0319610be48361089b565b1687529582019590820190600101610bca565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000610c3460608301888a610b73565b602083820381850152610c4882888a610bba565b84810360408601528581529150808201600586901b830182018760005b88811015610cd457858303601f190184528135368b9003601e19018112610c8b57600080fd5b8a01803567ffffffffffffffff811115610ca457600080fd5b8036038c1315610cb357600080fd5b610cc08582898501610bf7565b958701959450505090840190600101610c65565b50909c9b505050505050505050505050565b604081526000610cfa604083018688610b73565b8281036020840152610d0d818587610bba565b979650505050505050565b600082821015610d3857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ef83d1347c0cc84b1536f11e05783fa43278ee8c2226ca71dcac260d4cdc6a4064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806386458a9a1161005b57806386458a9a146100d85780638da5cb5b146100eb578063904cea8914610106578063f2fde38b1461011957600080fd5b80630c73853b14610082578063715018a6146100ab5780637421237c146100b5575b600080fd5b610095610090366004610811565b61012c565b6040516100a2919061082a565b60405180910390f35b6100b36101c6565b005b6100c86100c33660046108b3565b6101da565b60405190151581526020016100a2565b6100b36100e6366004610942565b610236565b6000546040516001600160a01b0390911681526020016100a2565b6100b36101143660046109ed565b610383565b6100b3610127366004610a6e565b6104a3565b6002602052600090815260409020805461014590610a89565b80601f016020809104026020016040519081016040528092919081815260200182805461017190610a89565b80156101be5780601f10610193576101008083540402835291602001916101be565b820191906000526020600020905b8154815290600101906020018083116101a157829003601f168201915b505050505081565b6101ce610521565b6101d8600061057b565b565b6000808484846040516020016101f293929190610ac3565b60408051601f1981840301815291815281516020928301206001600160a01b03881660009081526001909352912090915061022d90826105cb565b95945050505050565b61023e610521565b6000805b86811015610378578888888381811061025d5761025d610afb565b90506020020160208101906102729190610a6e565b87878481811061028457610284610afb565b90506020020160208101906102999190610b11565b6040516020016102ab93929190610ac3565b60408051601f1981840301815291815281516020928301206001600160a01b038c166000908152600190935291209092506102e690836105e8565b508383828181106102f9576102f9610afb565b905060200281019061030b9190610b2c565b6000848152600260205260409020610324929091610742565b50886001600160a01b03167fa37cd0d03093e07c4ef9cd1f187c6914dc250f2801c02c8eabd6ac8395ce24c089898989898960405161036896959493929190610c20565b60405180910390a2600101610242565b505050505050505050565b61038b610521565b6000805b8481101561049a57868686838181106103aa576103aa610afb565b90506020020160208101906103bf9190610a6e565b8585848181106103d1576103d1610afb565b90506020020160208101906103e69190610b11565b6040516020016103f893929190610ac3565b60408051601f1981840301815291815281516020928301206001600160a01b038a1660009081526001909352912090925061043390836105f4565b50600082815260026020526040812061044b916107c6565b866001600160a01b03167fde0904bd74762636b0230e0d8a5fe443456c9439692fd9f70523616fc20d80b38787878760405161048a9493929190610ce6565b60405180910390a260010161038f565b50505050505050565b6104ab610521565b6001600160a01b0381166105155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61051e8161057b565b50565b6000546001600160a01b031633146101d85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205415155b90505b92915050565b60006105df8383610600565b60006105df838361064f565b6000818152600183016020526040812054610647575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105e2565b5060006105e2565b60008181526001830160205260408120548015610738576000610673600183610d18565b855490915060009061068790600190610d18565b90508181146106ec5760008660000182815481106106a7576106a7610afb565b90600052602060002001549050808760000184815481106106ca576106ca610afb565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806106fd576106fd610d3d565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105e2565b60009150506105e2565b82805461074e90610a89565b90600052602060002090601f01602090048101928261077057600085556107b6565b82601f106107895782800160ff198235161785556107b6565b828001600101855582156107b6579182015b828111156107b657823582559160200191906001019061079b565b506107c29291506107fc565b5090565b5080546107d290610a89565b6000825580601f106107e2575050565b601f01602090049060005260206000209081019061051e91905b5b808211156107c257600081556001016107fd565b60006020828403121561082357600080fd5b5035919050565b600060208083528351808285015260005b818110156108575785810183015185820160400152820161083b565b81811115610869576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461089657600080fd5b919050565b80356001600160e01b03198116811461089657600080fd5b6000806000606084860312156108c857600080fd5b6108d18461087f565b92506108df6020850161087f565b91506108ed6040850161089b565b90509250925092565b60008083601f84011261090857600080fd5b50813567ffffffffffffffff81111561092057600080fd5b6020830191508360208260051b850101111561093b57600080fd5b9250929050565b60008060008060008060006080888a03121561095d57600080fd5b6109668861087f565b9650602088013567ffffffffffffffff8082111561098357600080fd5b61098f8b838c016108f6565b909850965060408a01359150808211156109a857600080fd5b6109b48b838c016108f6565b909650945060608a01359150808211156109cd57600080fd5b506109da8a828b016108f6565b989b979a50959850939692959293505050565b600080600080600060608688031215610a0557600080fd5b610a0e8661087f565b9450602086013567ffffffffffffffff80821115610a2b57600080fd5b610a3789838a016108f6565b90965094506040880135915080821115610a5057600080fd5b50610a5d888289016108f6565b969995985093965092949392505050565b600060208284031215610a8057600080fd5b6105df8261087f565b600181811c90821680610a9d57607f821691505b602082108103610abd57634e487b7160e01b600052602260045260246000fd5b50919050565b6bffffffffffffffffffffffff19606094851b811682529290931b90911660148301526001600160e01b0319166028820152602c0190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b2357600080fd5b6105df8261089b565b6000808335601e19843603018112610b4357600080fd5b83018035915067ffffffffffffffff821115610b5e57600080fd5b60200191503681900382131561093b57600080fd5b8183526000602080850194508260005b85811015610baf576001600160a01b03610b9c8361087f565b1687529582019590820190600101610b83565b509495945050505050565b8183526000602080850194508260005b85811015610baf576001600160e01b0319610be48361089b565b1687529582019590820190600101610bca565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000610c3460608301888a610b73565b602083820381850152610c4882888a610bba565b84810360408601528581529150808201600586901b830182018760005b88811015610cd457858303601f190184528135368b9003601e19018112610c8b57600080fd5b8a01803567ffffffffffffffff811115610ca457600080fd5b8036038c1315610cb357600080fd5b610cc08582898501610bf7565b958701959450505090840190600101610c65565b50909c9b505050505050505050505050565b604081526000610cfa604083018688610b73565b8281036020840152610d0d818587610bba565b979650505050505050565b600082821015610d3857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ef83d1347c0cc84b1536f11e05783fa43278ee8c2226ca71dcac260d4cdc6a4064736f6c634300080d0033",
  "devdoc": {
    "author": "BootNode",
    "details": "Registers the functions that will be allowed to be executed by assets delegates. Functions are grouped by target contract and asset collection.",
    "kind": "dev",
    "methods": {
      "add(address,address[],bytes4[],string[])": {
        "params": {
          "_collection": "- The asset collection address.",
          "_contracts": "- The target contract addresses.",
          "_selectors": "- The allowed function selectors."
        }
      },
      "isAllowedFunction(address,address,bytes4)": {
        "params": {
          "_collection": "- The owner's address.",
          "_contract": "- The owner's address.",
          "_selector": "- The owner's address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(address,address[],bytes4[])": {
        "params": {
          "_collection": "- The owner's address.",
          "_contracts": "- The owner's address.",
          "_selectors": "- The owner's address."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "DelegationRecipes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(address,address[],bytes4[],string[])": {
        "notice": "Adds a group of allowed functions to a asset collection."
      },
      "isAllowedFunction(address,address,bytes4)": {
        "notice": "Checks if a function is allowed for a collection."
      },
      "remove(address,address[],bytes4[])": {
        "notice": "Removes a group of allowed functions to a collection."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2596,
        "contract": "src/DelegationRecipes.sol:DelegationRecipes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9551,
        "contract": "src/DelegationRecipes.sol:DelegationRecipes",
        "label": "functionByCollection",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)6760_storage)"
      },
      {
        "astId": 9555,
        "contract": "src/DelegationRecipes.sol:DelegationRecipes",
        "label": "functionDescriptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)6760_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)6760_storage"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)6760_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 6759,
            "contract": "src/DelegationRecipes.sol:DelegationRecipes",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6566_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)6566_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6561,
            "contract": "src/DelegationRecipes.sol:DelegationRecipes",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6565,
            "contract": "src/DelegationRecipes.sol:DelegationRecipes",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}